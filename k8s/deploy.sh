#!/bin/bash

# Script de Deploy para Kubernetes
# Uso: ./deploy.sh [registry-url] [image-tag]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Par√¢metros - usando imagem local
IMAGE_NAME="nuxt-app"
IMAGE_TAG="latest"
FULL_IMAGE_NAME="${IMAGE_NAME}:${IMAGE_TAG}"

echo -e "${GREEN}üöÄ Iniciando deploy da aplica√ß√£o Nuxt.js no Kubernetes${NC}"
echo -e "${YELLOW}Imagem local: ${FULL_IMAGE_NAME}${NC}"
echo ""

# Fun√ß√£o para verificar se kubectl est√° configurado
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        echo -e "${RED}‚ùå kubectl n√£o encontrado. Instale o kubectl primeiro.${NC}"
        exit 1
    fi
    
    if ! kubectl cluster-info &> /dev/null; then
        echo -e "${RED}‚ùå kubectl n√£o consegue conectar ao cluster. Verifique sua configura√ß√£o.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ kubectl configurado e conectado ao cluster${NC}"
}

# Fun√ß√£o para verificar se a imagem local existe
check_local_image() {
    echo -e "${YELLOW}üîç Verificando se a imagem local existe...${NC}"
    
    if ! docker image inspect ${FULL_IMAGE_NAME} &> /dev/null; then
        echo -e "${RED}‚ùå Imagem local ${FULL_IMAGE_NAME} n√£o encontrada${NC}"
        echo -e "${YELLOW}üí° Execute primeiro: docker build -t ${FULL_IMAGE_NAME} .${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Imagem local encontrada${NC}"
}

# Fun√ß√£o para carregar imagem local no cluster
load_image_to_cluster() {
    echo -e "${YELLOW}üì¶ Carregando imagem local para o cluster...${NC}"
    
    # Verificar se estamos usando kind ou minikube
    if command -v kind &> /dev/null && kind get clusters &> /dev/null; then
        echo -e "${YELLOW}üîÑ Carregando imagem no Kind...${NC}"
        kind load docker-image ${FULL_IMAGE_NAME}
    elif command -v minikube &> /dev/null && minikube status &> /dev/null; then
        echo -e "${YELLOW}üîÑ Carregando imagem no Minikube...${NC}"
        minikube image load ${FULL_IMAGE_NAME}
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Cluster local detectado. Certifique-se de que a imagem est√° dispon√≠vel no cluster.${NC}"
        echo -e "${YELLOW}üí° Se necess√°rio, execute: docker save ${FULL_IMAGE_NAME} | docker load${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Imagem carregada no cluster${NC}"
}

# Fun√ß√£o para preparar deployment com imagem local
prepare_deployment() {
    echo -e "${YELLOW}üìù Preparando deployment com imagem local...${NC}"
    
    # Verificar se deployment.yaml existe
    if [ ! -f "deployment.yaml" ]; then
        echo -e "${RED}‚ùå deployment.yaml n√£o encontrado${NC}"
        exit 1
    fi
    
    # Atualizar a imagem no deployment se necess√°rio
    if grep -q "image: nuxt-app:latest" deployment.yaml; then
        sed -i "s|image: nuxt-app:latest|image: ${FULL_IMAGE_NAME}|g" deployment.yaml
        echo -e "${GREEN}‚úÖ Deployment atualizado com imagem local${NC}"
    else
        echo -e "${GREEN}‚úÖ Deployment j√° configurado corretamente${NC}"
    fi
}

# Fun√ß√£o para aplicar os manifestos
apply_manifests() {
    echo -e "${YELLOW}üìã Aplicando manifestos Kubernetes...${NC}"
    
    # Aplicar ingress controller primeiro (Traefik)
    echo -e "${YELLOW}üîß Instalando Traefik Ingress Controller...${NC}"
    kubectl apply -f traefik-deployment.yaml
    
    # Aguardar Traefik ficar pronto
    echo -e "${YELLOW}‚è≥ Aguardando Traefik ficar pronto...${NC}"
    kubectl wait --for=condition=available --timeout=300s deployment/traefik -n kube-system
    
    # Aplicar manifestos da aplica√ß√£o em ordem
    kubectl apply -f namespace.yaml
    kubectl apply -f configmap.yaml
    kubectl apply -f deployment.yaml
    kubectl apply -f service.yaml
    kubectl apply -f ingress.yaml
    kubectl apply -f hpa.yaml
    
    echo -e "${GREEN}‚úÖ Manifests aplicados com sucesso${NC}"
}

# Fun√ß√£o para configurar DNS local
setup_dns() {
    echo -e "${YELLOW}üåê Configurando DNS local...${NC}"
    
    # Verificar se o script de DNS existe
    if [ -f "setup-dns-nuxt.sh" ]; then
        echo -e "${YELLOW}üìù Executando configura√ß√£o de DNS...${NC}"
        sudo ./setup-dns-nuxt.sh
        echo -e "${GREEN}‚úÖ DNS configurado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Script de DNS n√£o encontrado. Configure manualmente:${NC}"
        echo -e "${YELLOW}   echo '192.168.3.4 nuxt-app.com' | sudo tee -a /etc/hosts${NC}"
        echo -e "${YELLOW}   echo '192.168.3.4 nuxt-app.local' | sudo tee -a /etc/hosts${NC}"
    fi
}

# Fun√ß√£o para verificar o status do deploy
check_deployment() {
    echo -e "${YELLOW}üîç Verificando status do deployment...${NC}"
    
    # Aguardar rollout
    kubectl rollout status deployment/nuxt-app -n nuxt-app --timeout=300s
    
    # Mostrar status
    echo ""
    echo -e "${GREEN}üìä Status dos recursos:${NC}"
    kubectl get all -n nuxt-app
    
    echo ""
    echo -e "${GREEN}üåê Informa√ß√µes de acesso:${NC}"
    kubectl get ingress -n nuxt-app
    echo ""
    echo -e "${GREEN}üîó URLs de acesso:${NC}"
    echo -e "${YELLOW}  http://nuxt-app.local${NC}"
    echo -e "${YELLOW}  http://nuxt-app.com${NC}"
    echo ""
    echo -e "${GREEN}üì° Traefik Dashboard:${NC}"
    TRAEFIK_IP=$(kubectl get svc traefik -n kube-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "192.168.3.242")
    echo -e "${YELLOW}  http://${TRAEFIK_IP}:8080${NC}"
}

# Fun√ß√£o para mostrar comandos √∫teis
show_commands() {
    echo ""
    echo -e "${GREEN}üõ†Ô∏è  Comandos √∫teis:${NC}"
    echo ""
    echo "Ver logs da aplica√ß√£o:"
    echo "  kubectl logs -f deployment/nuxt-app -n nuxt-app"
    echo ""
    echo "Ver logs do Traefik:"
    echo "  kubectl logs -f deployment/traefik -n kube-system"
    echo ""
    echo "Verificar ingress:"
    echo "  kubectl get ingress -n nuxt-app"
    echo "  kubectl describe ingress nuxt-app-ingress -n nuxt-app"
    echo ""
    echo "Port-forward para teste local:"
    echo "  kubectl port-forward svc/nuxt-app-service 8080:80 -n nuxt-app"
    echo ""
    echo "Verificar pods:"
    echo "  kubectl get pods -n nuxt-app"
    echo "  kubectl get pods -n kube-system | grep traefik"
    echo ""
    echo "Descrever deployment:"
    echo "  kubectl describe deployment nuxt-app -n nuxt-app"
    echo ""
    echo "Remover tudo:"
    echo "  kubectl delete -f ."
    echo "  kubectl delete -f traefik-deployment.yaml"
}

# Fun√ß√£o principal
main() {
    echo -e "${GREEN}================================${NC}"
    echo -e "${GREEN}  Deploy Nuxt.js no Kubernetes  ${NC}"
    echo -e "${GREEN}================================${NC}"
    echo ""
    
    check_kubectl
    check_local_image
    load_image_to_cluster
    prepare_deployment
    apply_manifests
    setup_dns
    check_deployment
    show_commands
    
    echo ""
    echo -e "${GREEN}üéâ Deploy conclu√≠do com sucesso!${NC}"
}

# Executar fun√ß√£o principal
main "$@"
